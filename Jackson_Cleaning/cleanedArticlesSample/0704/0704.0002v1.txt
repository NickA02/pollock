 and preliminaries The focus of this paper is decompositions of k sparse graphs into edge disjoint subgraphs that certify sparsity. We use graph to mean a multi graph possibly with loops. We say that a graph is k sparse if no sub set of nvertices spans more than knedges in the graph a k sparse graph with knedges is k tight . We call the range kk the upper range of sparse graphs and kthe lower range. In this paper we present ecient algorithms for nding decompositions that certify sparsity in the upper range of . Our algorithms also apply in the lower range which was already addressed by . A decomposition certies the sparsity of a graph if the sparse graphs and graphs admitting the decomposition coincide. Computer Science Department Smith College Northampton MA. streinucs.smith.edu yDepartment of Computer Science University of Massachusetts Amherst. therancs.umass.edu arXiv.v math.CO Mar Our algorithms are based on a new characterization of sparse graphs which we call the pebble game with colors . The pebble game with colors is a simple graph construction rule that produces a sparse graph along with a sparsitycertifying decomposition. We dene and study a canonical class of pebble game constructions which correspond to previously studied decompostion of sparse graphs into edge disjoint trees. Our results provide a unifying framework for all the previously known special cases including NashWilliamsTutte and . Indeed in the lower range canonical pebble game constructions capture the properties of the augmenting paths used in matroid union and intersection algorithms . Since the sparse graphs in the upper range are not known to be unions or intersections of the matroids for which there are ecient augmenting path algorithms these do not easily apply in the upper range. Pebble game with colors constructions may thus be considered a strength ening of augmenting paths to the upper range of matroidal sparse graphs. . Sparse graphs A graph is k sparse if for any nonempty subgraph with medges and nvertices mknWe observe that this condition implies that k and from now on in this paper we will make this assumption. A sparse graph that has nvertices and exactly knedges is called tight . For a graph G V E and VV we use the notation span Vfor the number of edges in the subgraph induced by V. In a directed graph outVis the number of edges with the tail in Vand the head in VV for a subgraph induced by V we call such an edge an outedge There are two important types of subgraphs of sparse graphs. A block is a tight subgraph of a sparse graph. A component is a maximal block. Table summarizes the sparse graph terminology used in this paper. . Sparsitycertifying decompositions. Akarborescence is a graph that admits a decomposition into kedgedisjoint spanning trees. Figure a shows an example of a arborescence. The k arborescent graphs are described by the wellknown theorems of Tutte and NashWilliams as exactly the k ktight graphs. Amap is a graph that admits an orientation such that the out degree of each vertex is exactly one. A kmap is a graph that admits a decomposition intokedgedisjoint maps. Figure b shows an example of a map the edges are oriented in one possible conguration certifying that each color Term Meaning Sparse graph G Every nonempty subgraph on nvertices hasknedges Tight graph G G V E is sparse andjVjnjEjkn Block HinG Gis sparse and His a tight subgraph Component HofG Gis sparse and His a maximal block Map Graph that admits an outdegree exactly one orientation k mapsandtrees trees and kmaps Tk trees each vertex is in exactly kof them Set of subtrees in VVConnected components of the trees in a TkinEV Proper Tk The set of subtrees in every subgraph has size Table Sparse graph and decomposition terminology used in this paper. forms a map. Maps may be equivalently dened see e.g. as having exactly one cycle per connected component. Another characterization of maps which we will use extensively in this paper is as the tight graphs . The kmaps are evidently k tight and show that the converse holds as well. AnTkis a decomposition into edgedisjoint trees such that each vertex is in exactly kof them. Figure a shows an example of a T. Given a subgraph Hof aTkgraph G theset of subtrees inHis the collection of the connected components of the trees in GinH. We observe that these subtrees may come from the same tree or be singlevertex empty trees. It is also helpful to note that the denition of a subtree is relative to a specic subgraph . Figure a shows a graph with a T decomposition we note that one of the trees is an isolated vertex in the bottomright corner. The subgraph in Figure b has three black subtrees and one gray subtree an isolated vertex at the topright corner and two single edges. These count as three subtrees even though they come from the same back tree when the whole graph in considered. Figure c shows another subgraph in this case there are three gray subtrees and one black one. Table contains the decomposition terminology used in this paper. The decomposition problem. We dene the decomposition problem for sparse graphs as taking a graph as its input and producing as output a decomposition that can be used to certify sparsity. In this paper we will Our terminology follows Lov asz in . In the matroid literature maps are sometimes known as bases of the bicycle matroid or spanning pseudoforests. acbeda b c Figure Examples of sparsitycertifying decompositions a a arborescence b a map c a mapsandtrees. Edges with the same line style belong to the same subgraph. The map is shown with a certifying orientation. a b c Figure a A graph with a T decomposition one of the three trees is a single vertex in the bottom right corner. b The highlighted subgraph in color has three black subtrees and one gray subtree. c The highlighted subgraph in color has three gray subtrees and one black subtree. study three kinds of outputs mapsandtrees proper Tkdecompositions and the pebble game with colors decomposition which is dened in the next section. Historical background The wellknown theorems of Tutte and NashWilliams relate the k ktight graphs to the existence of decompositions into edgedisjoint span ning trees. Taking a matroid viewpoint Edmonds gave another proof of this result using matroid unions. The equivalence of mapsandtrees graphs and tight graphs in the lower range is shown using matroid unions in and matroid augmenting paths are the basis of the algorithms for the lower range of . In rigidity theory a foundational theorem of Laman shows that tight Laman graphs correspond to generically minimally rigid barand joint frameworks in the plane. Tay proved an analogous touchstone result for bodybar frameworks in any dimension using k ktight graphs. Rigidity by counts motivated interest in the upper range and Crapo proved the equivalence of Laman graphs and proper T graphs. Tay used this condition to give a direct proof of Lamans theorem and gener alized the T condition to all Tkforkk. Haas studied Tkdecompositions in detail and proved the equivalence of tight graphs and proper Tkgraphs for the general upper range. We observe the aside from our new pebble game with colors decomposition all the combinatorial char acterizations of the upper range of sparse graphs including the counts have a geometric interpretation . A pebble game algorithm was rst proposed in as an elegant alter native to Hendricksons Laman graph algorithms . Berg and Jordan provided the formal analysis of the pebble game of and introduced the idea of playing the game on a directed graph. Lee and Streinu gen eralized the pebble game to the entire range of parameters k and left as an open problem using the pebble game to nd sparsity certifying decompositions. The pebble game with colors Ourpebble game with colors is a set of rules for constructing graphs indexed by nonnegative integers kand. We will use the pebble game with colors as the basis of an ecient algorithm for the decomposition problem later in this paper. Since the phrase with colors is necessary only for comparison to we will omit it in the rest of the paper when the context is clear. We now present the pebble game with colors. The game is played by a single player on a xed nite set of vertices. The player makes a nite sequence of moves a move consists in the addition andor orientation of an edge. At any moment of time the state of the game is captured by a directed graph H we call H taken as an undirected graph a pebble game with colors graph . We describe the pebble game with colors in terms of its initial congu ration and the allowed moves. a b Figure Examples of pebble game with colors moves. a Add edge. b Pebble slide. Pebbles on vertices are shown as black or gray dots. Edges are colored with the color of the pebble on them. Initialization in the beginning of the pebble game Hhasnvertices and no edges. We start by placing kpebbles on each vertex of H one of each color ci fori k . Add edge with colors Letvandwbe vertices with at least pebbles on them. Let tfv wghave a pebble on it and let sbe other vertex. Pick up a pebble from t add the edge tstoEH and put the pebble picked up from ton the new edge. While playing the pebble game all edges are directed and we use the notation vwto indicate a directed edge from vtow. Figure a shows examples of the add edge move. Pebble slide Letwbe a vertex with a pebble pon it and let vwbe an edge in H. Replace vwwith wvinEH put the pebble that was on on vwonv and put ponwv. Note that the color of an edge can change with a pebble slide move. Figure b shows examples. The convention in these gures and through out this paper is that pebbles on vertices are represented as colored dots and that edges are shown in the color of the pebble on them. From the denition of the pebble slide move it is easy to see that a particular pebble is always either on the vertex where it started or on an edge that has this vertex as the tail. However when making a sequence ofpebble slide moves that reverse the orientation of a path in H it is sometimes convenient to think of this path reversal sequence as bringing a pebble from the end of the path to the beginning. The output of playing the pebble game is its complete conguration. Output At the end of the game we obtain the directed graph H along with the location and colors of the pebbles. Observe that since each edge has exactly one pebble on it the pebble game conguration colors the edges. We say that H taken as an undirected graph G isconstructed by the k pebble game or that His apebble game graph . Since each edge of Hhas exactly one pebble on it the pebble games conguration partitions the edges into kdierent colors. We call this de composition of Hapebble game decomposition . Figure a shows an example of a tight graph with a pebble game decomposition. a b c Figure A tight graph with one possible pebble game decomposition. The edges are oriented to show sparsity for each color. a The graph Kwith a pebble game decomposition. There is an empty black tree at the center vertex and a gray spanning tree. b The highlighted subgraph has two black trees and a gray tree the black edges are part of a larger cycle but contribute a tree to the subgraph. c The highlighted subgraph with a light gray background has three empty gray trees the black edges contain a cycle and do not contribute a subtree to the subgraph. Generalizing the denition of the set of subtrees in an Tk the set of subtrees in a subgraph Gof a pebble game graph Gis the set of monochro matic acyclic connected components of the sparse graphs in a pebble game graph. As before these are taken relative to a specic subgraph and may be empty trees or subtrees of a larger tree. They may also be part of a monochromatic cycle in G. Notation Meaning spanVNumber of edges spanned in HbyVV i.e.jEHVj pebVNumber of pebbles on VV outVNumber of edges vwinHwith vVandwVV pebiv Number of pebbles of color cionvV outiv Number of edges vwcolored ciforvV Table Pebble game notation used in this paper. The properties of pebble game decompositions are studied in Section and Theorem shows that each color must be sparse. The orientation of the edges in Figure a shows this. For example Figure a shows a tight graph with one possible pebble game decomposition. The whole graph contains a gray subtree and a black subtree that is an isolated vertex. The subgraph in Figure b has a black tree and a gray tree with the edges of the black tree coming from a cycle in the larger graph. In Figure c however the black cycle does not contribute a subtree. All three subtrees in this subgraph are singlevertex gray trees. In the following discussion we use the notation peb v for the number of pebbles on vand pebiv to indicate the number of pebbles of colors ion v. Table lists the pebble game notation used in this paper. Our Results We describe our results in this section. The rest of the paper provides the proofs. Our rst result is a strengthening of the pebble games of to include colors. It says that sparse graphs are exactly pebble game graphs. Recall that from now on all pebble games discussed in this paper are our pebble game with colors unless noted explicitly. Theorem Sparse graphs and pebble game graphs coincide. A graph Gisk sparse with kif and only if Gis a pebble game graph. Next we consider pebble game decompositions showing that they are a generalization of proper Tkdecompositions that extend to the entire ma troidal range of sparse graphs. Theorem The pebble game with colors decomposition. A graph Gis a pebble game graph if and only if it admits a decomposition into k edgedisjoint subgraphs such that each is sparse and every subgraph of Gcontains at least subtrees of the sparse graphs in the decomposition. The sparse subgraphs in the statement of Theorem are the col ors. We observe that the subtrees condition in the pebble game with colors decomposition is similar to that of a proper Tk and that this is one of the main facts used by Tay in . We do not however know how to realize a tight graph as a rigid barandjoint framework in the plane directly from an arbitrary pebble game decomposition of a graph. Our next results show that for anypebble game graph we can spe cialize its pebble game construction to generate a decomposition that is a mapsandtrees or proper Tk. We call these specialized pebble game con structions canonical and using canonical pebble game constructions we obtain new direct proofs of existing arboricity results. It is easy to see from Theorem mapsandtrees are special cases of the pebble game decomposition each of the spanning trees contributes at least one piece of tree to every subgraph. The case of proper Tkgraphs is more subtle if each color in a pebble game decomposition is a forest then we have found a proper Tk but this class is a subset of all possible proper Tkdecompositions of a tight graph. We show that this class of proper Tkdecompositions is sucient to certify sparsity. We now state the main theorem for the upper and lower range. Theorem Main Theorem Lower Range Mapsandtrees coin cide with pebble game graphs. Letk. A graph Gis a tight pebble game graph if and only if Gis ak mapsandtrees. Theorem Main Theorem Upper Range Proper Tkgraphs coincide with pebble game graphs. Letkk. A graph Gis a tight pebble game graph if and only if it is a proper Tkwithknedges. As corollaries we obtain the existing decomposition results for sparse graphs. Corollary Crapo Haas .Letkk. A graph Gis tight if and only if it is a proper Tk. Corollary Tutte NashWilliams White and Whiteley .Let k. A graph Gis tight if and only if has a k mapsandtrees decomposition. Eciently nding canonical pebble game constructions. The proofs of Theorem and Theorem lead to an obvious algorithm with On run ning time for the decomposition problem. Our last result improves on this showing that a canonical pebble game construction and thus a maps andtrees or proper Tkdecomposition can be found using a pebble game algorithm in On time and space. These time and space bounds mean that our algorithm can be combined with those of without any change in complexity. Pebble game graphs In this section we prove Theorem a strengthening of results from to the pebble game with colors. Since many of the relevant properties of the pebble game with colors carry over directly from the pebble games of we refer the reader there for the proofs. We begin by establishing some invariants that hold during the execution of the pebble game. Lemma Pebble game invariants. During the execution of the pebble game the following invariants are maintained in H I There are at least pebbles on V. I For each vertex vspanv out v peb vk. I For each VVspanV out V peb Vkn. I For every vertex vVoutiv pebiv . I Every maximal path consisting only of edges with color ciends in either the rst vertex with a pebble of color cior a cycle. Proof. I I I I This invariant clearly holds at the initialization phase of the pebble game with colors. That add edge andpebble slide moves preserve I is clear from inspection. I ByI a monochromatic path of edges is forced to end only at a vertex with a pebble of the same color on it. If there is no pebble of that color reachable then the path must eventually visit some vertex twice. From these invariants we can show that the pebble game constructible graphs are sparse. Lemma Pebble game graphs are sparse . LetHbe a graph constructed with the pebble game. Then His sparse. If there are exactly pebbles on VH then His tight. The main step in proving that every sparse graph is a pebble game graph is the following. Recall that by bringing a pebble to vwe mean reorienting Hwithpebble slide moves to reduce the out degree of vby one. Lemma The pebble condition .Letvwbe an edge such thatHvwis sparse. If pebfv wg then a pebble not on vwcan be brought to either vorw. It follows that any sparse graph has a pebble game construction. Theorem Sparse graphs and pebble game graphs coincide. A graph Gisk sparse with kif and only if Gis a pebble game graph. The pebble game with colors decomposition In this section we prove Theorem which characterizes all pebble game decompositions. We start with the following lemmas about the structure of monochromatic connected components in H the directed graph maintained during the pebble game. Lemma Monochromatic pebble game subgraphs are sparse. LetHibe the subgraph of Hinduced by edges with pebbles of color cion them. Then Hiissparse for i k . Proof. ByI Hiis a set of edges with out degree at most one for every vertex. Lemma Subtrees in a pebble game graph. Every subgraph of the directed graph Hin a pebble game construction contains at least monochro matic subtrees and each of these is rooted at either a vertex with a pebble on it or a vertex that is the tail of an outedge. Recall that an outedge from a subgraph H V E is an edge vw with vVandvw E. Proof. LetH V E be a nonempty subgraph of H and assume with out loss of generality that His induced by V. ByI outVpeb V. We will show that each pebble and outedge tail is the root of a subtree. Consider a vertex vVand a color ci. By I there is a unique monochromatic directed path of color cistarting at v. By I if this path ends at a pebble it does not have a cycle. Similarly if this path reaches a vertex that is the tail of an outedge also in color cii.e. if the monochromatic path from vleaves V then the path cannot have a cycle inH. Since this argument works for any vertex in any color for each color there is a partitioning of the vertices into those that can reach each pebble outedge tail or cycle. It follows that each pebble and outedge tail is the root of a monochromatic tree as desired. Applied to the whole graph Lemma gives us the following. Lemma Pebbles are the roots of trees. In any pebble game congu ration each pebble of color ciis the root of a possibly empty monochromatic subtree of color ci. Remark Haas showed in that in an Tk a subgraph induced by n vertices with medges has exactly knmsubtrees in it. Lemma strengthens Haas result by extending it to the lower range and giving a construction that nds the subtrees showing the connection between the pebble condition and the hereditary condition on proper Tk. We conclude our investigation of arbitrary pebble game constructions with a description of the decomposition induced by the pebble game with colors. Theorem The pebble game with colors decomposition. A graph Gis a pebble game graph if and only if it admits a decomposition into k edgedisjoint subgraphs such that each is sparse and every subgraph of Gcontains at least subtrees of the sparse graphs in the decomposition. Proof. LetGbe a pebble game graph. The existence of the kedgedisjoint sparse subgraphs was shown in Lemma and Lemma proves the condition on subgraphs. For the other direction we observe that a color ciwithtitrees in a given subgraph can span at most ntiedges summing over all the colors shows that a graph with a pebble game decomposition must be sparse. Apply Theorem to complete the proof. Remark We observe that a pebble game decomposition for a Laman graph may be read out of the bipartite matching used in Hendricksons Laman graph extraction algorithm. Indeed pebble game orientations have a natural correspondence with the bipartite matchings used in . Mapsandtrees are a special case of pebble game decompositions for tight graphs if there are no cycles in of the colors then the trees rooted at the corresponding pebbles must be spanning since they have n edges. Also if each color forms a forest in an upper range pebble game decomposition then the subtrees condition ensures that the pebble game decomposition is a proper Tk. In the next section we show that the pebble game can be specialized to correspond to mapsandtrees and proper Tkdecompositions. Canonical Pebble Game Constructions In this section we prove the main theorem Theorem and Theorem continuing the investigation of decompositions induced by pebble game con structions by investigating the case where a minimum number of monochro matic cycles are created. The proof of the main theorem shows that for these constructions the pebble game decomposition is either a mapsandtrees or proper Tk. Every decomposition characterization of tight graphs discussed above follows immediately from the main theorem giving new proofs of the previous results in a unied framework. The proof of the main theorem relies on two specializations of the pebble game which we describe. The rst is a modication of the add edge move. Canonical add edge When performing an add edge move cover the new edge with a color that is on both vertices if possible. If not then take the highest numbered color present. The second is a restriction on which pebble slide moves we allow. Canonical pebble slide Apebble slide moves is allowed only when it does not create a monochromatic cycle. We call a pebble game construction that uses only these moves canoni cal. In this section we will show that ever pebble game graph has a canonical pebble game construction Lemma and Lemma and that canonical pebble game constructions correspond to proper Tkand mapsandtrees decompositions Theorem and Theorem . We begin with a technical lemma that motivates the denition of canon ical pebble game constructions. It shows that the situations disallowed by the canonical moves are allthe ways for cycles to form in the lowest colors. Lemma Monochromatic cycle creation. LetvVhave a pebble pof color cion it. A monochromatic cycle colored ciis created in exactly one of the following ways M The is a vertex win a tree of edges colored cirooted at vand the edge vwis added with an add edge move and pis used to cover vw. M There is a vertex win a tree of edges colored cithat contains v the edgewvis present and a pebble slide move over wvusespto cover the reversed edge vw. Proof. Observe that the preconditions in the statement of the lemma are implied by Lemma . By Lemma monochromatic cycles form when the last pebble of color ciis removed from a connected monochromatic subgraph. M andM are the only ways to do this in a pebble game construction since the color of an edge only changes when it is inserted the rst time or a new pebble is put on it by a pebble slide move. Figure a and Figure b show examples of M andM map creation moves respectively in a pebble game construction. vwvw a vwvw b Figure Creating monochromatic cycles in a pebble game. a A typeM move creates a cycle by adding a black edge. b A type M move creates a cycle with a pebble slide move. The vertices are labeled according to their role in the denition of the moves. We next show that if a graph has a pebble game construction then it has a canonical pebble game construction. This is done in two steps considering the cases M andM separately. The proof gives two constructions that implement the canonical add edge andcanonical pebble slide moves. Lemma The canonical add edge move. LetGbe a graph with a pebble game construction. Cycle creation steps of type M can be elimi nated in colors cifori. Here minfk g. Proof. Foradd edge moves cover the edge with a color present on both v andwif possible. If this is not possible then there are distinct colors present. Use the highest numbered color to cover the new edge. Remark We note that in the upper range there is always a repeated color so nocanonical add edge moves create cycles in the upper range. Thecanonical pebble slide move is dened by a global condition. To prove that we obtain the same class of graphs using only canonical pebble slide moves we need to extend Lemma to only canonical moves. The main step is to show that if there is any sequence of moves that reorients a path from vtow there is a sequence of canonical moves that does the same thing. Lemma The canonical pebble slide move. Any sequence of peb ble slide moves leading to an add edge move can be replaced with one that has no M steps and allows the same add edge move. Figure and Figure illustrate the construction used in the proof of Lemma . We call this the shortcut construction by analogy to matroid union and intersection augmenting paths used in previous work on the lower range. Figure shows the structure of the proof. The shortcut construction removes an M step at the beginning of a sequence of pebble slides that reorient a path from vtow. Since one application of the shortcut construc tion reorients a simple path from a vertex wtow and a path from vto wis preserved the shortcut construction can be applied inductively to nd the sequence of moves we want. Proof. Without loss of generality we can assume that our sequence of moves reorients a simple path in H and that the rst move the end of the path isM . The M step moves a pebble of color cifrom a vertex wonto the edge vw which is reversed. Because the move is M vandware contained in a maximal monochromatic tree of color ci. Call this tree H i and observe that it is rooted at w. Now consider the edges reversed in our sequence of moves. As noted above before we make any of the moves these sketch out a simple path in Hending at w. Let zbe the rst vertex on this path in H i. We modify our sequence of moves as follows delete from the beginning every move before the one that reverses some edge yz prepend onto what is left a sequence of moves that moves the pebble on wtozinH i. wva vw b wvw c Figure Outline of the shortcut construction a An arbitrary simple path from vtowwith curved lines indicating simple paths. b An M step with the gray tree spanning the black edge that will ip shown in dashed lines the solid gray edges were part of the original path from a. c The shortened path to the gray pebble the new path follows the gray tree all the way from the rst time the original path touched the gray tree. The doubled path from vtowis simple and the shortcut construction can be applied inductively to it. a b Figure Eliminating M moves a an M move b avoiding the M by moving along another path. The path where the pebbles move is indicated by doubled lines. a b Figure Eliminating M moves a the rst step to move the black peb ble along the doubled path is M b avoiding the M and simplifying the path. Since no edges change color in beginning of the new sequence we have eliminated the M move at the beginning. Because our construction does not change any of the edges involved in the remaining tail of the original sequence the part of the original path that is left in the new sequence will still be a simple path in H meeting our initial hypothesis. The rest of the lemma follows by induction. Together Lemma and Lemma prove the following. Lemma . IfGis a pebble game graph then Ghas a canonical pebble game construction. Using canonical pebble game constructions we can identify the tight pebble game graphs with mapsandtrees and Tk. Theorem Main Theorem Lower Range Mapsandtrees coin cide with pebble game graphs. Letk. A graph Gis a tight pebble game graph if and only if Gis ak mapsandtrees. Proof. As observed above a mapsandtrees decomposition is a special case of the pebble game decomposition. Applying Theorem we see that any mapsandtrees must be a pebble game graph. For the reverse direction consider a canonical pebble game construction of a tight graph. From Lemma we see that there are pebbles left on Gat the end of the construction. The denition of the canonical add edge move implies that there must be at least one pebble of each cifor i . It follows that there is exactly one of each of these colors. By Lemma each of these pebbles is the root of a monochromatic subtree with n edges yielding the required edgedisjoint spanning trees. Corollary Tutte NashWilliams White and Whiteley .Let k. A graph Gis tight if and only if has a k mapsandtrees decomposition. We next consider the decompositions induced by canonical pebble game constructions when k . Theorem Main Theorem Upper Range Proper Tkgraphs coincide with pebble game graphs. Letkk. A graph Gis a tight pebble game graph if and only if it is a proper Tkwithknedges. Proof. As observed above a proper Tkdecomposition must be sparse. What we need to show is that a canonical pebble game construction of a tight graph produces a proper Tk. By Theorem and Lemma we already have the condition on subtrees and the decomposition into edgedisjoint trees. Finally an application of I shows that every vertex must in in exactly kof the trees as required. Corollary Crapo Haas .Letkk. A graph Gis tight if and only if it is a proper Tk. Pebble game algorithms for decompositions A nave implementation of the constructions in the previous section leads to an algorithm requiring n time to collect each pebble in a canonical construction in the worst case n applications of the construction in Lemma requiring n time each. In this section we describe algorithms for the decomposition problem that run in time On. We begin with the overall structure of the algorithm. Algorithm The canonical pebble game with colors . Input A graph G. Output A pebble game graph H and the components of H. Method SetVH VGand place one pebble of each color on the vertices of H. For each edge vwEGtry to collect pebbles on vandwusing pebble slide moves as described by Lemma . If pebbles can be collected add vwtoHusing an add edge move as in Lemma otherwise discard vw. Finally return H the locations of the pebbles and a list of components. Correctness. Theorem and the observation from that the sparse graphs are the independent sets of a matroid show that His a maximum sized sparse subgraph of G. Since the construction found is canonical the main theorem shows that the coloring of the edges in Hgives a mapsand trees or proper Tkdecomposition. Complexity. We start by observing that the running time of Algorithm is the time taken to process On edges added to HandOm edges not added to H. We rst consider the cost of an edge of Gthat is added to H. Each of the pebble game moves can be implemented in constant time. What remains is to describe an ecient way to nd and move the pebbles. We use the following algorithm as a subroutine of Algorithm to do this. Algorithm Finding a canonical path to a pebble. . Input Vertices v andw and a pebble game conguration on a directed graph H. Output If a pebble was found yes and no otherwise. The congu ration of His updated. Method Start by doing a depthrst search from from vinH. If no pebble not on wis found stop and return no. Otherwise a pebble was found. We now have a path vv e e p vp u where the viare vertices and eiis the edge vivi. Let ceibe the color of the pebble on ei. We will use the array cto keep track of the colors of pebbles on vertices and edges after we move them and the array sto sketch out a canonical path from vtouby nding a successor for each edge. Setsu endand set cuto the color of an arbitrary pebble on u. For each edge ep ep e check to see if cviis set if so go on to the next edge. Otherwise check to see if cvi cei. If it is set svi ei and set cvi cei and go on to the next edge. Otherwise try to nd a monochromatic path in color cvifrom vi tovi. If a vertex xwith cxset is encountered we have a path vi x f f q xqxthat is monochromatic in cvi set cxi cfi andsxi fifori q. Ifcx cfq stop. Otherwise recursively check that there is not a monochromatic cxpath from xqto xusing this same procedure. Finally slide pebbles along the path from vtouspecied by svssv etc. The correctness of Algorithm comes from the fact that it is implement ing the shortcut construction. Eciency comes from the fact that instead of potentially moving the pebble back and forth Algorithm precomputes a canonical path crossing each edge of Hat most three times once in the initial depthrst search and twice while converting the initial path to a canonical one. It follows that each accepted edges takes On time for a total of On time spent processing edges in H. From we know that after each accepted edge the components of H can be updated in time On. Finally using the results of we see that the rejected edges take an amortized O time each. Summarizing we have shown that the canonical pebble game with colors solves the decomposition problem in time On. Conclusions and open problems We presented a new characterization of sparse graphs the pebble game with colors and used it to give an ecient algorithm for nding decompositions of sparse graphs into edgedisjoint trees. Our algorithm which is the rst that nds such sparsitycertifying decompositions runs in time On which is as fast as the algorithms for recognizing sparse graphs in the upper range from . We also use the pebble game with colors to describe a new sparsity certifying decomposition that applies to the entire matroidal range of sparse graphs. We dened and studied a class of canonical pebble game constructions that correspond to either a mapsandtrees or proper Tkdecomposition. This gives a new proof of the TutteNashWilliams arboricity theorem and a unied proof of the previously studied decomposition certicates of sparsity. Canonical pebble game constructions also show the relationship between the pebble condition which applies to the upper range of to matroid union augmenting paths which do not apply in the upper range. Algorithmic consequences and open problems. In Gabow and Westermann give an On algorithm for recognizing sparse graphs in the lower range and extracting sparse subgraphs from dense ones. Their tech nique is based on eciently nding matroid union augmenting paths which extend a mapsandtrees decomposition. The On algorithm uses two subroutines to nd augmenting paths cyclic scanning which nds aug menting paths one at a time and batch scanning which nds groups of disjoint augmenting paths. We observe that Algorithm can be used to replace cyclic scanning in Gabow and Westermanns algorithm without changing the running time. The data structures used in the implementation of the pebble game detailed in are simpler and easier to implement than those used to support cyclic scanning. The two major open algorithmic problems related to the pebble game are then Open problem . Develop a pebble game algorithm with the properties ofbatch scanning and obtain an implementable Onalgorithm for the lower range. Open problem . Extend batch scanning to the pebble condition and derive an Onpebble game algorithm for the upper range. 